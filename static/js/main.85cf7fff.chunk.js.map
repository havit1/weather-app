{"version":3,"sources":["Components/common/AutoComplete.jsx","Components/Search/SearchForm.jsx","Context/cities-context.js","Components/Navbar/Navbar.jsx","Components/common/AddToLocalStorageButton.jsx","Components/ShortInfo/ShortInfo.jsx","utils/apiRequests.js","Components/SavedCities/SavedCities.jsx","Components/Home/Home.jsx","Components/common/MapComponent.jsx","Components/DayPages/DayPage.jsx","utils/utils.js","Components/DayPages/WeekPage.jsx","Components/Search/SearchPage.jsx","Context/CitiesProvider.jsx","App.js","serviceWorker.js","index.js"],"names":["Autocomplete","state","userInput","activeSuggestion","filteredSuggestions","chosenCityId","onChange","e","currentTarget","value","length","fullCitiesList","filter","suggestion","name","toLowerCase","indexOf","props","setShowSuggestions","setState","setCityToFind","id","onClick","showSuggestions","innerText","suggestionsListComponent","this","className","suggestionsClassname","map","index","key","inputClassname","type","placeholder","Component","Search","cityToFind","onSubmit","preventDefault","history","push","AutoComplete","onFormSubmit","withRouter","CitiesContext","React","createContext","location","context","useContext","link","pathname","homeCity","to","AddToLocalStorageButton","addToSavedCities","_cities","JSON","parse","localStorage","getItem","clickedCity","find","savedId","undefined","splice","setItem","stringify","ShortInfo","weather","main","wind","sys","temp","Math","floor","country","speed","getCurrentWeatherWithName","cityName","a","axios","get","process","res","data","Error","message","getWeatherForWeek","getWeatherWithPos","latitude","longitude","getWeatherOfCityGroupById","arrayOfIds","idsToSearch","city","join","list","SavedCities","citiesWithDetailedInfo","getWeather","console","log","savedCities","error","arr1","arr2","i","prevProps","prevState","compare","contextType","Home","cityInfo","loaded","navigator","geolocation","getCurrentPosition","pos","coords","userWeather","setHomeCity","err","warn","code","enableHighAccuracy","timeout","maximumAge","getUserWeather","MapComponent","withScriptjs","withGoogleMap","useState","showInfo","setShowInfo","defaultZoom","defaultCenter","lat","coord","lng","lon","isMarkerShown","position","onCloseClick","currentTemp","DayPage","weatherArray","day","moment","dt_txt","format","date","toUpperCase","slice","dt","description","googleMapURL","loadingElement","containerElement","mapElement","sortByDay","array","weatherForNextDays","weatherListNextDay","WeekPage","start","end","days","sum","t","average","tmp","round","tempToShow","d","SearchPage","cityWeather","forecast","currentWeatherLoaded","futureWeatherLoaded","getCityWeather","match","params","futureWeather","replace","renderDay","weatherToShow","search","CitiesProvider","cityToShow","Provider","setCityToShow","children","App","path","exact","component","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.85cf7fff.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport fullCitiesList from \"../../city.list.min.json\";\r\n\r\nclass Autocomplete extends Component {\r\n  state = {\r\n    userInput: \"\",\r\n    activeSuggestion: 0,\r\n    filteredSuggestions: [],\r\n    chosenCityId: null\r\n  };\r\n\r\n  onChange = e => {\r\n    const userInput = e.currentTarget.value;\r\n\r\n    const filteredSuggestions =\r\n      userInput.length >= 3 &&\r\n      fullCitiesList.filter(\r\n        suggestion =>\r\n          suggestion.name.toLowerCase().indexOf(userInput.toLowerCase()) > -1\r\n      );\r\n\r\n    this.props.setShowSuggestions(true);\r\n\r\n    this.setState(\r\n      {\r\n        activeSuggestion: 0,\r\n        filteredSuggestions,\r\n        userInput: e.currentTarget.value\r\n      },\r\n      () =>\r\n        this.props.setCityToFind({\r\n          name: this.state.userInput,\r\n          id: this.state.chosenCityId\r\n        })\r\n    );\r\n  };\r\n\r\n  onClick = (e, id) => {\r\n    this.props.setShowSuggestions(false);\r\n\r\n    this.setState(\r\n      {\r\n        activeSuggestion: 0,\r\n        filteredSuggestions: [],\r\n        showSuggestions: false,\r\n        userInput: e.currentTarget.innerText,\r\n        chosenCityId: id\r\n      },\r\n      () =>\r\n        this.props.setCityToFind({\r\n          name: this.state.userInput,\r\n          id: this.state.chosenCityId\r\n        })\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let suggestionsListComponent;\r\n    if (this.props.showSuggestions && this.state.userInput) {\r\n      if (this.state.filteredSuggestions.length) {\r\n        suggestionsListComponent = (\r\n          <ul className={this.props.suggestionsClassname}>\r\n            {this.state.filteredSuggestions.map((suggestion, index) => {\r\n              return (\r\n                <li\r\n                  key={suggestion.id}\r\n                  onClick={e => this.onClick(e, suggestion.id)}\r\n                >\r\n                  {suggestion.name}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <input\r\n          className={this.props.inputClassname}\r\n          type=\"text\"\r\n          onChange={this.onChange}\r\n          value={this.state.userInput}\r\n          placeholder=\"Find city...\"\r\n        />\r\n        {suggestionsListComponent}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n","import React, { Component } from \"react\";\r\nimport AutoComplete from \"../common/AutoComplete\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport \"./SearchForm.scss\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    cityToFind: {},\r\n    showSuggestions: false\r\n  };\r\n\r\n  setShowSuggestions = showSuggestions => {\r\n    this.setState({ showSuggestions });\r\n  };\r\n\r\n  onChange = cityToFind => {\r\n    this.setState({ cityToFind });\r\n  };\r\n\r\n  onSubmit = e => {\r\n    e.preventDefault();\r\n    if (!this.state.cityToFind.name) return;\r\n    this.setState({ showSuggestions: false });\r\n    this.props.history.push(`/${this.state.cityToFind.name}?today`);\r\n  };\r\n\r\n  render() {\r\n    const { showSuggestions } = this.state;\r\n    return (\r\n      <form className=\"search-form__form\" onSubmit={this.onSubmit}>\r\n        <button className=\"search-form__form-button\">S</button>\r\n        <AutoComplete\r\n          onFormSubmit={this.onSubmit}\r\n          setShowSuggestions={this.setShowSuggestions}\r\n          showSuggestions={showSuggestions}\r\n          inputClassname=\"search-form__form-input\"\r\n          suggestionsClassname=\"search-form__form-suggestions\"\r\n          setCityToFind={this.onChange}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Search);\r\n","import React from \"react\";\r\n\r\nconst CitiesContext = React.createContext();\r\n\r\nexport default CitiesContext;\r\n","import React, { useContext } from \"react\";\r\nimport Search from \"../Search/SearchForm\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport CitiesContext from \"../../Context/cities-context\";\r\nimport \"./Navbar.scss\";\r\n\r\nconst Navbar = ({ location }) => {\r\n  const context = useContext(CitiesContext);\r\n\r\n  const link =\r\n    location.pathname.length > 1 ? location.pathname : context.homeCity.name;\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <ul className=\"navbar__days\">\r\n        <li className=\"navbar__days-day\">\r\n          <NavLink to=\"/\">Home</NavLink>\r\n        </li>\r\n        <li className=\"navbar__days-day\">\r\n          <NavLink to={`${link}?today`}>Today</NavLink>\r\n        </li>\r\n        <li className=\"navbar__days-day\">\r\n          <NavLink to={`${link}?tommorrow`}>Tomorrow</NavLink>\r\n        </li>\r\n        <li className=\"navbar__days-day\">\r\n          <NavLink to={`${link}?week`}>Week</NavLink>\r\n        </li>\r\n      </ul>\r\n      <Search />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Navbar);\r\n","import React, { useContext } from \"react\";\r\nimport CitiesContext from \"../../Context/cities-context\";\r\n\r\nconst AddToLocalStorageButton = ({ id, className }) => {\r\n  const { addToSavedCities } = useContext(CitiesContext);\r\n\r\n  const onClick = id => {\r\n    let _cities = JSON.parse(localStorage.getItem(\"savedCities\")) || [];\r\n    const clickedCity = _cities.find(savedId => savedId.id === id);\r\n    const index = _cities.indexOf(clickedCity);\r\n    if (clickedCity !== undefined) {\r\n      _cities.splice(index, 1);\r\n    } else {\r\n      _cities.push({ id: id });\r\n    }\r\n    localStorage.setItem(\"savedCities\", JSON.stringify(_cities));\r\n    addToSavedCities(id);\r\n  };\r\n\r\n  return (\r\n    <button className={className} onClick={() => onClick(id)}>\r\n      +\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default AddToLocalStorageButton;\r\n","import React from \"react\";\r\nimport AddToLocalStorageButton from \"../common/AddToLocalStorageButton\";\r\nimport \"./ShortInfo.scss\";\r\n\r\nconst ShortInfo = ({ weather, main, wind, sys, name, id }) => {\r\n  if (main) main.temp = Math.floor(main.temp);\r\n\r\n  return (\r\n    <div className=\"short-info\">\r\n      <AddToLocalStorageButton className=\"short-info__button\" id={id} />\r\n      {main && <div className=\"short-info__main\">{main.temp} ℃</div>}\r\n      {name && sys && (\r\n        <div className=\"short-info__name\">\r\n          {name}, {sys.country}\r\n        </div>\r\n      )}\r\n      {(weather || wind) && (\r\n        <div className=\"short-info__additional\">\r\n          {weather && (\r\n            <div className=\"short-info__additional-weather\">\r\n              {weather[0].main}\r\n            </div>\r\n          )}\r\n          {wind && (\r\n            <div className=\"short-info__additional-wind\">\r\n              , Wind - {wind.speed} mettres per second\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShortInfo;\r\n","import axios from \"axios\";\r\n\r\nexport const getCurrentWeatherWithName = async cityName => {\r\n  try {\r\n    const res = await axios.get(\r\n      `https://api.openweathermap.org/data/2.5/weather?q=${cityName}&units=metric&APPID=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n    );\r\n    const { data } = res;\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const getCurrentWeatherWithId = async id => {\r\n  try {\r\n    const res = await axios.get(\r\n      `https://api.openweathermap.org/data/2.5/weather?id=${id}&units=metric&APPID=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n    );\r\n    const { data } = res;\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const getWeatherForWeek = async id => {\r\n  try {\r\n    const res = await axios.get(\r\n      `https://api.openweathermap.org/data/2.5/forecast?id=${id}&units=metric&appid=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n    );\r\n\r\n    const { data } = res;\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const getWeatherWithPos = async (latitude, longitude) => {\r\n  try {\r\n    const res = await axios.get(\r\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&APPID=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n    );\r\n    const { data } = res;\r\n    return data;\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n\r\nexport const getWeatherOfCityGroupById = async arrayOfIds => {\r\n  let idsToSearch = arrayOfIds.map(city => city.id).join(\",\");\r\n\r\n  try {\r\n    const res = await axios.get(\r\n      `https://api.openweathermap.org/data/2.5/group?id=${idsToSearch}&units=metric&APPID=${process.env.REACT_APP_OPENWEATHER_API_KEY}`\r\n    );\r\n    const {\r\n      data: { list }\r\n    } = res;\r\n    return list;\r\n  } catch (error) {\r\n    throw new Error(error.message);\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { getWeatherOfCityGroupById } from \"../../utils/apiRequests\";\r\nimport { Link } from \"react-router-dom\";\r\nimport CitiesContext from \"../../Context/cities-context\";\r\nimport \"./SavedCities.scss\";\r\n\r\nclass SavedCities extends Component {\r\n  state = {\r\n    citiesWithDetailedInfo: []\r\n  };\r\n\r\n  getWeather = async () => {\r\n    console.log(\"Getting weather in Saved cities\");\r\n    try {\r\n      const data = await getWeatherOfCityGroupById(this.context.savedCities);\r\n      this.setState({ citiesWithDetailedInfo: data });\r\n    } catch (err) {\r\n      console.error(\"Error when loading weather data in SavedCities.jsx\");\r\n      this.setState({ citiesWithDetailedInfo: [] });\r\n    }\r\n  };\r\n\r\n  compare(arr1, arr2) {\r\n    if (arr1.length !== arr2.length) return false;\r\n    else {\r\n      for (let i = 0; i < arr1.length; i++)\r\n        if (arr1[i].id !== arr2[i].id) return false;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.context.savedCities.length > 0) {\r\n      this.getWeather();\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      !this.compare(this.context.savedCities, this.state.citiesWithDetailedInfo)\r\n    ) {\r\n      console.log(\"SavedCities\");\r\n      this.getWeather();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { citiesWithDetailedInfo } = this.state;\r\n\r\n    return (\r\n      <div className=\"saved-cities\">\r\n        <h1 className=\"saved-cities__header-text\">Saved Cities</h1>\r\n        <ul className=\"saved-cities__list\">\r\n          {citiesWithDetailedInfo.map(\r\n            city =>\r\n              city && (\r\n                <li className=\"saved-cities__list-element\" key={city.id}>\r\n                  <Link to={`/${city.name}?today`}>\r\n                    <p className=\"saved-cities__list-element-name\">\r\n                      {city.name}\r\n                    </p>\r\n                    <p className=\"saved-cities__list-element-temp\">\r\n                      {city.main.temp} ℃\r\n                    </p>\r\n                  </Link>\r\n                </li>\r\n              )\r\n          )}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nSavedCities.contextType = CitiesContext;\r\n\r\nexport default SavedCities;\r\n","import React, { Component } from \"react\";\r\nimport ShortInfo from \"../ShortInfo/ShortInfo\";\r\nimport SavedCities from \"../SavedCities/SavedCities\";\r\nimport { getWeatherWithPos } from \"../../utils/apiRequests\";\r\nimport CitiesContext from \"../../Context/cities-context\";\r\nclass Home extends Component {\r\n  state = {\r\n    cityInfo: {},\r\n    loaded: false\r\n  };\r\n\r\n  getUserWeather() {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async pos => {\r\n        console.log(\"Getting user home weather\");\r\n        try {\r\n          const userWeather = await getWeatherWithPos(\r\n            pos.coords.latitude,\r\n            pos.coords.longitude\r\n          );\r\n          this.setState({ cityInfo: userWeather, loaded: true });\r\n          this.context.setHomeCity(userWeather);\r\n        } catch (error) {\r\n          console.log(error.message);\r\n          this.setState({ loaded: false });\r\n        }\r\n      },\r\n      err => console.warn(`ERROR(${err.code}): ${err.message}`),\r\n      { enableHighAccuracy: true, timeout: 5000, maximumAge: 0 }\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getUserWeather();\r\n  }\r\n\r\n  render() {\r\n    const { cityInfo } = this.state;\r\n    const { loaded } = this.state;\r\n\r\n    return (\r\n      <>\r\n        {loaded && (\r\n          <ShortInfo\r\n            weather={cityInfo.weather}\r\n            main={cityInfo.main}\r\n            wind={cityInfo.wind}\r\n            sys={cityInfo.sys}\r\n            name={cityInfo.name}\r\n            id={cityInfo.id}\r\n          ></ShortInfo>\r\n        )}\r\n        <SavedCities />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nHome.contextType = CitiesContext;\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  Marker,\r\n  withGoogleMap,\r\n  withScriptjs,\r\n  InfoWindow\r\n} from \"react-google-maps\";\r\n\r\nconst MapComponent = withScriptjs(\r\n  withGoogleMap(props => {\r\n    const [showInfo, setShowInfo] = useState(false);\r\n\r\n    return (\r\n      <GoogleMap\r\n        defaultZoom={8}\r\n        defaultCenter={{ lat: props.coord.lat, lng: props.coord.lon }}\r\n      >\r\n        {props.isMarkerShown && (\r\n          <Marker\r\n            onClick={() => setShowInfo(true)}\r\n            position={{ lat: props.coord.lat, lng: props.coord.lon }}\r\n          >\r\n            {showInfo && (\r\n              <InfoWindow onCloseClick={() => setShowInfo(false)}>\r\n                <p>{props.currentTemp} ℃</p>\r\n              </InfoWindow>\r\n            )}\r\n          </Marker>\r\n        )}\r\n      </GoogleMap>\r\n    );\r\n  })\r\n);\r\n\r\nexport default MapComponent;\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport MapComponent from \"../common/MapComponent\";\r\nimport \"./DayPage.scss\";\r\n\r\nconst DayPage = ({ weatherArray, day, coord, currentTemp }) => {\r\n  const name = moment(weatherArray[0].dt_txt).format(\"dddd\");\r\n  const date = moment(weatherArray[0].dt_txt).date();\r\n\r\n  return (\r\n    <div className=\"day-page\">\r\n      <div className=\"day-page__forecast\">\r\n        <h1>{day[0].toUpperCase() + day.slice(1)}</h1>\r\n        <h3>{`${name}, ${date}`}</h3>\r\n        <div className=\"day-page__forecast-table\">\r\n          <div className=\"day-page__forecast-table-row\">\r\n            <p className=\"day-page__forecast-table-column-1\">Time</p>\r\n            <p className=\"day-page__forecast-table-column-2\">Weather</p>\r\n          </div>\r\n          {weatherArray.map(day => (\r\n            <div className=\"day-page__forecast-table-row\" key={day.dt}>\r\n              <p className=\"day-page__forecast-table-column-1\">\r\n                {moment(day.dt_txt).format(\"H:mm\")}\r\n              </p>\r\n              <p className=\"day-page__forecast-table-column-2\">{`${\r\n                day.main.temp\r\n              } ℃, ${day.weather[0].description[0].toUpperCase() +\r\n                day.weather[0].description.slice(1)}, Wind - ${\r\n                day.wind.speed\r\n              } meter per second`}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <MapComponent\r\n        currentTemp={currentTemp}\r\n        coord={coord}\r\n        isMarkerShown\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_API_KEY}&callback=initMap`}\r\n        loadingElement={<div className=\"map__loadingElement\" />}\r\n        containerElement={<div className=\"map__containerElement\" />}\r\n        mapElement={<div className=\"map__mapElement\" />}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPage;\r\n","import moment from \"moment\";\r\n\r\nexport function sortByDay(array) {\r\n  const weatherForNextDays = [];\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    const weatherListNextDay = array.filter(\r\n      //   day =>\r\n      //     new Date(array[0].dt_txt.split(\" \").join(\"T\")).getDay() ===\r\n      //     new Date(day.dt_txt.split(\" \").join(\"T\")).getDay()\r\n      day => moment(array[0].dt_txt).day() === moment(day.dt_txt).day()\r\n    );\r\n\r\n    weatherForNextDays.push(weatherListNextDay);\r\n\r\n    array.splice(\r\n      array.indexOf(weatherListNextDay[0]),\r\n      array.indexOf(weatherListNextDay[weatherListNextDay.length - 1]) + 1\r\n    );\r\n  }\r\n  return weatherForNextDays;\r\n}\r\n","import React from \"react\";\r\nimport moment from \"moment\";\r\nimport \"./WeekPage.scss\";\r\n\r\nconst WeekPage = ({ weatherArray }) => {\r\n  const start = moment(weatherArray[0][0].dt_txt).format(\"MMMM, D\");\r\n  const end = moment(weatherArray[weatherArray.length - 1][0].dt_txt).format(\r\n    \"MMMM, D\"\r\n  );\r\n\r\n  const tempToShow = () => {\r\n    const weather = [];\r\n    weatherArray.map(day => {\r\n      let sum = 0;\r\n      day.map(t => {\r\n        sum = sum + t.main.temp;\r\n      });\r\n      let average = sum / day.length;\r\n\r\n      weather.push({ tmp: Math.round(average), day: day[0].dt_txt });\r\n    });\r\n    return weather;\r\n  };\r\n\r\n  const days = tempToShow();\r\n\r\n  return (\r\n    <div className=\"week-page\">\r\n      <h1>Week</h1>\r\n      <h3>{`${start} - ${end}`}</h3>\r\n      <ul className=\"week-page__list\">\r\n        {days.map(d => (\r\n          <li className=\"week-page__list-element\" key={d.day}>\r\n            <p className=\"week-page__list-element-day\">\r\n              {moment(d.day).format(\"dddd, D\")}\r\n            </p>\r\n            <p className=\"week-page__list-element-temp\">{d.tmp} ℃</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeekPage;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  getCurrentWeatherWithName,\r\n  getWeatherForWeek\r\n} from \"../../utils/apiRequests\";\r\nimport ShortInfo from \"../ShortInfo/ShortInfo\";\r\nimport DayPage from \"../DayPages/DayPage\";\r\nimport { sortByDay } from \"../../utils/utils\";\r\nimport WeekPage from \"../DayPages/WeekPage\";\r\n\r\nclass SearchPage extends Component {\r\n  state = {\r\n    cityWeather: {},\r\n    forecast: {},\r\n    currentWeatherLoaded: false,\r\n    futureWeatherLoaded: false\r\n  };\r\n\r\n  getCityWeather = async () => {\r\n    console.log(\"Getting city weather on SearchPage\");\r\n    try {\r\n      const weather = await getCurrentWeatherWithName(\r\n        this.props.match.params.name\r\n      );\r\n      this.setState({ cityWeather: weather, currentWeatherLoaded: true });\r\n\r\n      const futureWeather = await getWeatherForWeek(weather.id);\r\n      this.setState({ forecast: futureWeather });\r\n      futureWeather.list &&\r\n        this.setState({\r\n          forecast: sortByDay(futureWeather.list),\r\n          futureWeatherLoaded: true\r\n        });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n      this.props.history.replace(\"/error\");\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getCityWeather();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.match.params.name === this.props.match.params.name) return;\r\n    this.setState({ currentWeatherLoaded: false, futureWeatherLoaded: false });\r\n    this.getCityWeather();\r\n  }\r\n\r\n  renderDay = () => {\r\n    const {\r\n      forecast,\r\n      cityWeather: { coord, main }\r\n    } = this.state;\r\n    const { location } = this.props;\r\n\r\n    const weatherToShow =\r\n      forecast.length > 0 && location.search === \"?today\"\r\n        ? forecast[0]\r\n        : location.search === \"?tommorrow\"\r\n        ? forecast[1]\r\n        : forecast;\r\n\r\n    if (\r\n      this.props.location.search === \"?today\" ||\r\n      this.props.location.search === \"?tommorrow\"\r\n    ) {\r\n      return (\r\n        <DayPage\r\n          coord={coord}\r\n          weatherArray={weatherToShow}\r\n          day={location.search === \"?today\" ? \"today\" : \"tommorrow\"}\r\n          currentTemp={main.temp}\r\n        />\r\n      );\r\n    } else if (this.props.location.search === \"?week\") {\r\n      return <WeekPage weatherArray={weatherToShow} />;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      cityWeather,\r\n      currentWeatherLoaded,\r\n      futureWeatherLoaded\r\n    } = this.state;\r\n\r\n    return (\r\n      currentWeatherLoaded && (\r\n        <div>\r\n          <ShortInfo\r\n            main={cityWeather.main}\r\n            sys={cityWeather.sys}\r\n            name={cityWeather.name}\r\n            id={cityWeather.id}\r\n          />\r\n          {futureWeatherLoaded && this.renderDay()}\r\n        </div>\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPage;\r\n","import React, { Component } from \"react\";\r\nimport CitiesContext from \"./cities-context\";\r\n\r\nclass CitiesProvider extends Component {\r\n  state = {\r\n    savedCities: JSON.parse(localStorage.getItem(\"savedCities\")) || [],\r\n    homeCity: {},\r\n    cityToShow: {}\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CitiesContext.Provider\r\n        value={{\r\n          savedCities: this.state.savedCities,\r\n          homeCity: this.state.homeCity,\r\n          cityToShow: this.state.cityToShow,\r\n          setHomeCity: homeCity => this.setState({ homeCity }),\r\n          addToSavedCities: id => {\r\n            const savedCities = [...this.state.savedCities];\r\n            const clickedCity = savedCities.find(savedId => savedId.id === id);\r\n            const index = savedCities.indexOf(clickedCity);\r\n            if (clickedCity !== undefined) {\r\n              savedCities.splice(index, 1);\r\n            } else {\r\n              savedCities.push({ id: id });\r\n            }\r\n            this.setState({ savedCities });\r\n          },\r\n          setCityToShow: cityToShow => this.setState({ cityToShow })\r\n        }}\r\n      >\r\n        {this.props.children}\r\n      </CitiesContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CitiesProvider;\r\n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\";\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport Home from \"./Components/Home/Home\";\nimport SearchPage from \"./Components/Search/SearchPage\";\nimport CitiesProvider from \"./Context/CitiesProvider\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <CitiesProvider>\n        <div>\n          <Navbar />\n          <Switch>\n            <Route path=\"/\" exact component={Home} />\n            <Route path=\"/:name\" exact component={SearchPage} />\n\n            <Redirect to=\"/error\" component={() => <div>404</div>} />\n          </Switch>\n        </div>\n      </CitiesProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}